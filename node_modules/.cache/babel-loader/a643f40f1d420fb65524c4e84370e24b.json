{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/dror/WebProjects/react/coreui-noco-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/dror/WebProjects/react/coreui-noco-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/dror/WebProjects/react/coreui-noco-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dror/WebProjects/react/coreui-noco-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/dror/WebProjects/react/coreui-noco-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/dror/WebProjects/react/coreui-noco-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/dror/WebProjects/react/coreui-noco-front/src/Test.js\";\nimport React, { Component } from \"react\"; // import \"./App.css\";\n\nimport web3 from \"./web3.js\";\nimport profileAbi from \"./profile\";\nvar Dashboard = /*#__PURE__*/React.lazy(_c = function _c() {\n  return import(\"./views/dashboard/Dashboard\");\n});\n_c2 = Dashboard;\nvar playerOne = \"0x801F99d5af6f566eF3518a512213eE839E083F56\"; // I make then 2 different variables as I try to make these 2 different scenarios detailed as possible.\n// In our frontend these 2 variables will be the same one\n\nvar address = playerOne; // For testing purposes only!\n\nvar playerTwo = \"0x0e210f97eEb1369D8Db4132a4f67028Fb14F8A26\";\n\nvar compiledBinaryContract = require(\"./solidity/build/BinaryContract.json\");\n\nvar profile = new web3.eth.Contract(profileAbi, playerOne);\n\nvar Test = /*#__PURE__*/function (_Component) {\n  _inherits(Test, _Component);\n\n  var _super = _createSuper(Test);\n\n  function Test() {\n    var _this;\n\n    _classCallCheck(this, Test);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      friendsAddress: \"\",\n      friendRequestIndex: \"\",\n      playerOne: \"\",\n      providedAmount: \"\",\n      playerTwo: \"\" // validityInDays: \"\",\n      // message: \"\",\n\n    };\n\n    _this.onSubmitAddFriendRequest = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var accounts, friendsProfile, makeBatchRequest;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                makeBatchRequest = function _makeBatchRequest(calls) {\n                  var batch = new web3.BatchRequest();\n                  calls.map(function (call) {\n                    return new Promise(function (res, rej) {\n                      var req = call.request({\n                        from: accounts[0],\n                        gas: \"1000000\"\n                      }, function (err, data) {\n                        if (err) rej(err);else res(data);\n                      });\n                      batch.add(req);\n                    });\n                  });\n                  batch.execute();\n                };\n\n                event.preventDefault(); // Getting accounts list\n\n                _context.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context.sent;\n                console.log(account); // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n\n                friendsProfile = new web3.eth.Contract(profileAbi, _this.state.friendsAddress);\n                console.log(friendsProfile); // NOTE: that's how I convert between a batch request and 2 seperate \"send\" requests:\n\n                makeBatchRequest([// add both of the exchanges in a batch request.\n                profile.methods.addFriendRequest(_this.state.friendsAddress).send, friendsProfile.methods.addFriendRequestNotRestricted(address).send]);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onSubmitConfirmFriendRequest = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var accounts, friendsProfile, friendExchanges, friendRequestIndex, index, friendExchange, makeBatchRequest;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                makeBatchRequest = function _makeBatchRequest2(calls) {\n                  var batch = new web3.BatchRequest();\n                  calls.map(function (call) {\n                    return new Promise(function (res, rej) {\n                      var req = call.request({\n                        from: accounts[0],\n                        gas: \"1000000\"\n                      }, function (err, data) {\n                        if (err) rej(err);else res(data);\n                      });\n                      batch.add(req);\n                    });\n                  });\n                  batch.execute();\n                };\n\n                event.preventDefault(); // Getting accounts list\n\n                _context2.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context2.sent;\n                // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n                friendsProfile = new web3.eth.Contract(profileAbi, _this.state.friendsAddress); //Finding friend's exchange index:\n\n                _context2.next = 8;\n                return friendsProfile.methods.getAllExchanges().call();\n\n              case 8:\n                friendExchanges = _context2.sent;\n\n                for (index = 0; index < friendExchanges.length; index++) {\n                  friendExchange = friendExchanges[index]; //\"0\" represents addFriendRequest Enum\n\n                  if ( // if it is a friendRequest and the source is my friend\n                  friendExchange.exchangePurpose === \"0\" && friendExchange.exchangeDetails.source === _this.state.friendsAddress) {\n                    friendRequestIndex = index;\n                  }\n                }\n\n                makeBatchRequest([// add both of the exchanges in a batch request.\n                // In our frontend the user will choose the correct request, here I test it with 0 as there is only one request\n                profile.methods.confirmFriendRequest(0).send, friendsProfile.methods.confirmFriendRequestNotRestricted(friendRequestIndex).send]);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.onCheckMyFriends = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                event.preventDefault();\n                console.log(\"your friends are:\");\n                _context3.t0 = console;\n                _context3.next = 5;\n                return profile.methods.getFriends().call();\n\n              case 5:\n                _context3.t1 = _context3.sent;\n\n                _context3.t0.log.call(_context3.t0, _context3.t1);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.onRemoveFriendsList = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(event) {\n        var accounts, friendsProfile, makeBatchRequest;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                makeBatchRequest = function _makeBatchRequest3(calls) {\n                  var batch = new web3.BatchRequest();\n                  calls.map(function (call) {\n                    return new Promise(function (res, rej) {\n                      var req = call.request({\n                        from: accounts[0],\n                        gas: \"1000000\"\n                      }, function (err, data) {\n                        if (err) rej(err);else res(data);\n                      });\n                      batch.add(req);\n                    });\n                  });\n                  batch.execute();\n                };\n\n                event.preventDefault(); // Getting accounts list\n\n                _context4.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context4.sent;\n                // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friend's profile address\n                friendsProfile = new web3.eth.Contract(profileAbi, _this.state.friendsAddress);\n                makeBatchRequest([// remove both of the exchanges in a batch request.\n                profile.methods.removeAllFriends().send, friendsProfile.methods.removeAllFriends().send]);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.onSubmitAddDebtRequest = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(event) {\n        var accounts, friendsProfile, makeBatchRequest;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                makeBatchRequest = function _makeBatchRequest4(calls) {\n                  var batch = new web3.BatchRequest(); // let promises = calls.map(call => {\n\n                  calls.map(function (call) {\n                    return new Promise(function (res, rej) {\n                      var req = call.request({\n                        from: accounts[0],\n                        gas: \"1000000\"\n                      }, function (err, data) {\n                        if (err) rej(err);else res(data);\n                      });\n                      batch.add(req);\n                    });\n                  });\n                  batch.execute();\n                };\n\n                event.preventDefault(); // Getting accounts list\n\n                _context5.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context5.sent;\n                // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n                friendsProfile = new web3.eth.Contract(profileAbi, _this.state.playerTwo);\n                makeBatchRequest([// add both of the exchanges in a batch request.\n                // the difference: addDebtRequest(destination, same other args), addDebtRequestNotRestricted(source, same other args)\n                profile.methods.addDebtRequest(_this.state.playerTwo, _this.state.playerOne, _this.state.providedAmount, _this.state.playerTwo).send, friendsProfile.methods.addDebtRequestNotRestricted(_this.state.playerOne, _this.state.playerOne, _this.state.providedAmount, _this.state.playerTwo).send]);\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.onSubmitConfirmDebtRequest = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(event) {\n        var accounts, myExchanges, choosenRequest, myContracts, existedContractAddress, deployedContractAddress, contractExisted, i, _currentBinaryContract, currentDebtOfCurrentBinaryContract, accountsOfTransaction, currentBinaryContractAddress, currentBinaryContract, friendsProfile, newContractAddress, makeBatchRequest;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                makeBatchRequest = function _makeBatchRequest5(calls) {\n                  var batch = new web3.BatchRequest(); // let promises = calls.map(call => {\n\n                  calls.map(function (call) {\n                    return new Promise(function (res, rej) {\n                      var req = call.request({\n                        from: accounts[0],\n                        gas: \"2000000\"\n                      }, function (err, data) {\n                        if (err) rej(err);else res(data);\n                      });\n                      batch.add(req);\n                    });\n                  });\n                  batch.execute();\n                };\n\n                event.preventDefault(); // Getting accounts list\n\n                _context6.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context6.sent;\n                _context6.next = 7;\n                return profile.methods.getAllExchanges().call();\n\n              case 7:\n                myExchanges = _context6.sent;\n                choosenRequest = myExchanges[0]; // TODO: I use myExchanges[0] for testing only! The user will pick the correct one\n\n                _this.setState({\n                  playerTwo: choosenRequest.transaction.from\n                });\n\n                _this.setState({\n                  playerOne: choosenRequest.transaction.to\n                });\n\n                _this.setState({\n                  providedAmount: choosenRequest.transaction.amount\n                });\n\n                _context6.next = 14;\n                return profile.methods.getContracts().call();\n\n              case 14:\n                myContracts = _context6.sent;\n                contractExisted = false;\n                i = 0;\n\n              case 17:\n                if (!(i < myContracts.length)) {\n                  _context6.next = 33;\n                  break;\n                }\n\n                _context6.next = 20;\n                return new web3.eth.Contract(JSON.parse(compiledBinaryContract.interface), existedContractAddress = myContracts[i]);\n\n              case 20:\n                _currentBinaryContract = _context6.sent;\n                _context6.next = 23;\n                return _currentBinaryContract.methods.getCurrentDebt().call();\n\n              case 23:\n                currentDebtOfCurrentBinaryContract = _context6.sent;\n                accountsOfTransaction = [_this.state.playerOne, _this.state.playerTwo];\n\n                if (!(accountsOfTransaction.includes(String(currentDebtOfCurrentBinaryContract.debtor)) && accountsOfTransaction.includes(String(currentDebtOfCurrentBinaryContract.creditor)))) {\n                  _context6.next = 30;\n                  break;\n                }\n\n                _context6.next = 28;\n                return _currentBinaryContract.methods.addTransaction(_this.state.playerOne, _this.state.providedAmount, _this.state.playerTwo).send({\n                  from: accounts[0],\n                  gas: \"2000000\"\n                });\n\n              case 28:\n                contractExisted = true;\n                return _context6.abrupt(\"break\", 33);\n\n              case 30:\n                i++;\n                _context6.next = 17;\n                break;\n\n              case 33:\n                if (contractExisted) {\n                  _context6.next = 40;\n                  break;\n                }\n\n                _context6.next = 36;\n                return profile.methods.createBinaryContract(_this.state.playerOne, _this.state.providedAmount, _this.state.playerTwo).send({\n                  from: accounts[0],\n                  gas: \"4000000\"\n                });\n\n              case 36:\n                console.log(\"Binary contract was created successfully!\");\n                _context6.next = 39;\n                return profile.methods.getLastContract().call();\n\n              case 39:\n                deployedContractAddress = _context6.sent;\n\n              case 40:\n                currentBinaryContractAddress = contractExisted ? existedContractAddress : deployedContractAddress;\n                _context6.next = 43;\n                return new web3.eth.Contract(JSON.parse(compiledBinaryContract.interface), currentBinaryContractAddress);\n\n              case 43:\n                currentBinaryContract = _context6.sent;\n                friendsProfile = new web3.eth.Contract(profileAbi, _this.state.playerTwo); // we assign a zeroAddress if the contract already existed. Otherwise, the deployed contract address\n\n                if (!contractExisted) {\n                  _context6.next = 51;\n                  break;\n                }\n\n                _context6.next = 48;\n                return profile.methods.getZeroAddress().call();\n\n              case 48:\n                _context6.t0 = _context6.sent;\n                _context6.next = 52;\n                break;\n\n              case 51:\n                _context6.t0 = deployedContractAddress;\n\n              case 52:\n                newContractAddress = _context6.t0;\n                makeBatchRequest([// remove both of the exchanges in a batch request.\n                // We call this method in order to remove our exchange on the profile (solidity)\n                // TODO: when implementing it with the actual frontend, we should send the actual index instead of \"0\"\n                profile.methods.confirmDebtRequest(0).send, // We call this method in order to remove friend's exchange (solidity method)\n                // TODO: when implementing it with the actual frontend, we should send the actual index instead of \"0\"\n                friendsProfile.methods.confirmDebtRequestNotRestricted(0, newContractAddress).send]);\n\n              case 54:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    _this.onCheckMyExchanges = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(event) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                event.preventDefault();\n                console.log(\"your exchanges are:\");\n                _context7.t0 = console;\n                _context7.next = 5;\n                return profile.methods.getAllExchanges().call();\n\n              case 5:\n                _context7.t1 = _context7.sent;\n\n                _context7.t0.log.call(_context7.t0, _context7.t1);\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x7) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    _this.onCheckMyContracts = /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(event) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                event.preventDefault();\n                console.log(\"your contracts are:\");\n                _context8.t0 = console;\n                _context8.next = 5;\n                return profile.methods.getContracts().call();\n\n              case 5:\n                _context8.t1 = _context8.sent;\n\n                _context8.t0.log.call(_context8.t0, _context8.t1);\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      return function (_x8) {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n\n    _this.onRemoveExchangesList = /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(event) {\n        var accounts, friendsProfile, makeBatchRequest;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                makeBatchRequest = function _makeBatchRequest6(calls) {\n                  var batch = new web3.BatchRequest();\n                  calls.map(function (call) {\n                    return new Promise(function (res, rej) {\n                      var req = call.request({\n                        from: accounts[0],\n                        gas: \"2000000\"\n                      }, function (err, data) {\n                        if (err) rej(err);else res(data);\n                      });\n                      batch.add(req);\n                    });\n                  });\n                  batch.execute();\n                };\n\n                event.preventDefault(); // Getting accounts list\n\n                _context9.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context9.sent;\n                // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us playerTwo's address\n                friendsProfile = new web3.eth.Contract(profileAbi, _this.state.playerTwo);\n                makeBatchRequest([// remove both of the exchanges in a batch request.\n                profile.methods.removeAllExchanges().send, friendsProfile.methods.removeAllExchanges().send]);\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      return function (_x9) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n\n    _this.onRemoveContractsList = /*#__PURE__*/function () {\n      var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(event) {\n        var accounts, friendsProfile, makeBatchRequest;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                makeBatchRequest = function _makeBatchRequest7(calls) {\n                  var batch = new web3.BatchRequest();\n                  calls.map(function (call) {\n                    return new Promise(function (res, rej) {\n                      var req = call.request({\n                        from: accounts[0],\n                        gas: \"2000000\"\n                      }, function (err, data) {\n                        if (err) rej(err);else res(data);\n                      });\n                      batch.add(req);\n                    });\n                  });\n                  batch.execute();\n                };\n\n                event.preventDefault(); // Getting accounts list\n\n                _context10.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context10.sent;\n                // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us playerTwo's address\n                friendsProfile = new web3.eth.Contract(profileAbi, _this.state.playerTwo);\n                makeBatchRequest([// remove both of the exchanges in a batch request.\n                profile.methods.removeContracts().send, friendsProfile.methods.removeContracts().send]);\n\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      return function (_x10) {\n        return _ref10.apply(this, arguments);\n      };\n    }();\n\n    _this.handleChangeFriendAddress = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        friendsAddress: event.target.value\n      });\n    };\n\n    _this.handleChangeFriendRequestIndex = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        friendRequestIndex: event.target.value\n      });\n    };\n\n    _this.handleChangePlayerOne = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        playerOne: event.target.value\n      });\n    };\n\n    _this.handleChangeProvidedAmount = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        providedAmount: event.target.value\n      });\n    };\n\n    _this.handleChangePlayerTwo = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        playerTwo: event.target.value\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Test, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var ethereum;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                ethereum = window.ethereum;\n\n                if (!(typeof ethereum !== \"undefined\")) {\n                  _context11.next = 4;\n                  break;\n                }\n\n                _context11.next = 4;\n                return ethereum.enable();\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // TODO Omer: rename exchange -> request\n    //////////////////////////////////////////////////////////////////////////////////////\n    // Add a friend exchange for both our exchanges and friend exchanges\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Friends Part\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onSubmitAddFriendRequest,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Add a friend: insert here the friend's address\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.friendsAddress,\n              onChange: this.handleChangeFriendAddress,\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Send a friend Request!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onSubmitConfirmFriendRequest,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Confirm a friend request (insert friend's address)\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.friendsAddress,\n              onChange: this.handleChangeFriendAddress,\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Confirm a friend Request!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onCheckMyFriends,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Click here to check your Friends!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Check your Friends!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onRemoveFriendsList,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Click here to remove your Friends!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Remove your Friends!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"BinaryContract Part\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onSubmitAddDebtRequest,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"playerOne-amount-playerTwo\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.playerOne,\n              onChange: this.handleChangePlayerOne,\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.providedAmount,\n              onChange: this.handleChangeProvidedAmount,\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.playerTwo,\n              onChange: this.handleChangePlayerTwo,\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Send a Debt Request!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onSubmitConfirmDebtRequest,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"playerOne-amount-playerTwo\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.playerOne,\n              onChange: this.handleChangePlayerOne,\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.providedAmount,\n              onChange: this.handleChangeProvidedAmount,\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 579,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.playerTwo,\n              onChange: this.handleChangePlayerTwo,\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Confirm a Debt Request!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onCheckMyContracts,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Click here to check your contracts!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Check your contracts!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onCheckMyExchanges,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Click here to check your Exchanges!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Check your Exchanges!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onRemoveContractsList,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Click here to remove your Contracts!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Remove your Contracts!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onRemoveExchangesList,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Click here to remove your Exchanges!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Remove your Exchanges!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Test;\n}(Component);\n\nexport default Test;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Dashboard$React.lazy\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"sources":["/home/dror/WebProjects/react/coreui-noco-front/src/Test.js"],"names":["React","Component","web3","profileAbi","Dashboard","lazy","playerOne","address","playerTwo","compiledBinaryContract","require","profile","eth","Contract","Test","state","friendsAddress","friendRequestIndex","providedAmount","onSubmitAddFriendRequest","event","makeBatchRequest","calls","batch","BatchRequest","map","call","Promise","res","rej","req","request","from","accounts","gas","err","data","add","execute","preventDefault","getAccounts","console","log","account","friendsProfile","methods","addFriendRequest","send","addFriendRequestNotRestricted","onSubmitConfirmFriendRequest","getAllExchanges","friendExchanges","index","length","friendExchange","exchangePurpose","exchangeDetails","source","confirmFriendRequest","confirmFriendRequestNotRestricted","onCheckMyFriends","getFriends","onRemoveFriendsList","removeAllFriends","onSubmitAddDebtRequest","addDebtRequest","addDebtRequestNotRestricted","onSubmitConfirmDebtRequest","myExchanges","choosenRequest","setState","transaction","to","amount","getContracts","myContracts","contractExisted","i","JSON","parse","interface","existedContractAddress","currentBinaryContract","getCurrentDebt","currentDebtOfCurrentBinaryContract","accountsOfTransaction","includes","String","debtor","creditor","addTransaction","createBinaryContract","getLastContract","deployedContractAddress","currentBinaryContractAddress","getZeroAddress","newContractAddress","confirmDebtRequest","confirmDebtRequestNotRestricted","onCheckMyExchanges","onCheckMyContracts","onRemoveExchangesList","removeAllExchanges","onRemoveContractsList","removeContracts","handleChangeFriendAddress","target","value","handleChangeFriendRequestIndex","handleChangePlayerOne","handleChangeProvidedAmount","handleChangePlayerTwo","ethereum","window","enable"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import \"./App.css\";\nimport web3 from \"./web3.js\";\nimport profileAbi from \"./profile\";\n\nconst Dashboard = React.lazy(() => import(\"./views/dashboard/Dashboard\"));\n\nconst playerOne = \"0x801F99d5af6f566eF3518a512213eE839E083F56\";\n\n// I make then 2 different variables as I try to make these 2 different scenarios detailed as possible.\n// In our frontend these 2 variables will be the same one\nconst address = playerOne;\n\n// For testing purposes only!\nconst playerTwo = \"0x0e210f97eEb1369D8Db4132a4f67028Fb14F8A26\";\n\nconst compiledBinaryContract = require(\"./solidity/build/BinaryContract.json\");\n\nconst profile = new web3.eth.Contract(profileAbi, playerOne);\n\nclass Test extends Component {\n  state = {\n    friendsAddress: \"\",\n    friendRequestIndex: \"\",\n    playerOne: \"\",\n    providedAmount: \"\",\n    playerTwo: \"\",\n    // validityInDays: \"\",\n    // message: \"\",\n  };\n\n  async componentDidMount() {\n    let ethereum = window.ethereum;\n    if (typeof ethereum !== \"undefined\") {\n      await ethereum.enable();\n    }\n  }\n\n  // TODO Omer: rename exchange -> request\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Add a friend exchange for both our exchanges and friend exchanges\n  onSubmitAddFriendRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n    console.log(account);\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    console.log(friendsProfile);\n    // NOTE: that's how I convert between a batch request and 2 seperate \"send\" requests:\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n      profile.methods.addFriendRequest(this.state.friendsAddress).send,\n      friendsProfile.methods.addFriendRequestNotRestricted(address).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Confirm a friend exchange for both our exchanges and friend exchanges\n  onSubmitConfirmFriendRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    //Finding friend's exchange index:\n    let friendExchanges = await friendsProfile.methods.getAllExchanges().call();\n\n    let friendRequestIndex;\n\n    for (let index = 0; index < friendExchanges.length; index++) {\n      const friendExchange = friendExchanges[index];\n\n      //\"0\" represents addFriendRequest Enum\n      if (\n        // if it is a friendRequest and the source is my friend\n        friendExchange.exchangePurpose === \"0\" &&\n        friendExchange.exchangeDetails.source === this.state.friendsAddress\n      ) {\n        friendRequestIndex = index;\n      }\n    }\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n\n      // In our frontend the user will choose the correct request, here I test it with 0 as there is only one request\n      profile.methods.confirmFriendRequest(0).send,\n      friendsProfile.methods.confirmFriendRequestNotRestricted(\n        friendRequestIndex\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Getting my friends\n  onCheckMyFriends = async (event) => {\n    event.preventDefault();\n\n    console.log(\"your friends are:\");\n    console.log(await profile.methods.getFriends().call());\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  // Remove Friends list for both our friends and friend's friends\n  onRemoveFriendsList = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friend's profile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.friendsAddress\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      profile.methods.removeAllFriends().send,\n      friendsProfile.methods.removeAllFriends().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  ///////////////////////    BINARY_CONTRACT PART         //////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Add a debt request for both our exchanges and target exchanges\n  onSubmitAddDebtRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us friendsProfile address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // add both of the exchanges in a batch request.\n      // the difference: addDebtRequest(destination, same other args), addDebtRequestNotRestricted(source, same other args)\n      profile.methods.addDebtRequest(\n        this.state.playerTwo,\n        this.state.playerOne,\n        this.state.providedAmount,\n        this.state.playerTwo\n      ).send,\n      friendsProfile.methods.addDebtRequestNotRestricted(\n        this.state.playerOne,\n        this.state.playerOne,\n        this.state.providedAmount,\n        this.state.playerTwo\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      // let promises = calls.map(call => {\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"1000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Confirm a debt request for both our exchanges and target exchanges\n  onSubmitConfirmDebtRequest = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Setting this.state.{playerOne, Two, amount} from the request details:\n    let myExchanges = await profile.methods.getAllExchanges().call();\n    let choosenRequest = myExchanges[0]; // TODO: I use myExchanges[0] for testing only! The user will pick the correct one\n\n    this.setState({ playerTwo: choosenRequest.transaction.from });\n    this.setState({ playerOne: choosenRequest.transaction.to });\n    this.setState({ providedAmount: choosenRequest.transaction.amount });\n\n    let myContracts = await profile.methods.getContracts().call();\n\n    let existedContractAddress; // if a contract will be deployed, we will use this variable. Otherwise, we will use deployedContractAddress\n    let deployedContractAddress;\n    let contractExisted = false;\n\n    for (var i = 0; i < myContracts.length; i++) {\n      // in this for loop we try to find if a contract exist, or we should create one\n      let currentBinaryContract = await new web3.eth.Contract(\n        JSON.parse(compiledBinaryContract.interface),\n        (existedContractAddress = myContracts[i])\n      );\n\n      let currentDebtOfCurrentBinaryContract = await currentBinaryContract.methods\n        .getCurrentDebt()\n        .call();\n      let accountsOfTransaction = [this.state.playerOne, this.state.playerTwo];\n\n      if (\n        accountsOfTransaction.includes(\n          String(currentDebtOfCurrentBinaryContract.debtor)\n        ) &&\n        accountsOfTransaction.includes(\n          String(currentDebtOfCurrentBinaryContract.creditor)\n        )\n      ) {\n        // it means that the contract already exist\n\n        await currentBinaryContract.methods\n          .addTransaction(\n            this.state.playerOne,\n            this.state.providedAmount,\n            this.state.playerTwo\n          )\n          .send({\n            from: accounts[0],\n            gas: \"2000000\",\n          });\n\n        contractExisted = true;\n\n        break;\n      }\n    } // end of for loop - now we know if the contract existed or not\n\n    if (!contractExisted) {\n      // deploy a binaryContract\n      await profile.methods\n        .createBinaryContract(\n          this.state.playerOne,\n          this.state.providedAmount,\n          this.state.playerTwo\n        )\n        .send({\n          from: accounts[0],\n          gas: \"4000000\",\n        });\n\n      console.log(\"Binary contract was created successfully!\");\n\n      deployedContractAddress = await profile.methods.getLastContract().call();\n    }\n\n    let currentBinaryContractAddress = contractExisted\n      ? existedContractAddress\n      : deployedContractAddress;\n    let currentBinaryContract = await new web3.eth.Contract(\n      JSON.parse(compiledBinaryContract.interface),\n      currentBinaryContractAddress\n    );\n\n    let friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    // we assign a zeroAddress if the contract already existed. Otherwise, the deployed contract address\n    let newContractAddress = contractExisted\n      ? await profile.methods.getZeroAddress().call()\n      : deployedContractAddress;\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n\n      // We call this method in order to remove our exchange on the profile (solidity)\n      // TODO: when implementing it with the actual frontend, we should send the actual index instead of \"0\"\n      profile.methods.confirmDebtRequest(0).send,\n\n      // We call this method in order to remove friend's exchange (solidity method)\n      // TODO: when implementing it with the actual frontend, we should send the actual index instead of \"0\"\n      friendsProfile.methods.confirmDebtRequestNotRestricted(\n        0,\n        newContractAddress\n      ).send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      // let promises = calls.map(call => {\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Getting my exchanges\n  onCheckMyExchanges = async (event) => {\n    event.preventDefault();\n\n    console.log(\"your exchanges are:\");\n    console.log(await profile.methods.getAllExchanges().call());\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Getting my contracts\n  onCheckMyContracts = async (event) => {\n    event.preventDefault();\n\n    console.log(\"your contracts are:\");\n    console.log(await profile.methods.getContracts().call());\n  };\n  //////////////////////////////////////////////////////////////////////////////////////\n\n  // Remove Exchanges list for both our exchanges and friend exchanges\n  onRemoveExchangesList = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us playerTwo's address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      profile.methods.removeAllExchanges().send,\n      friendsProfile.methods.removeAllExchanges().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  // Remove Contracts list for both our contracts and friend contracts\n  onRemoveContractsList = async (event) => {\n    event.preventDefault();\n\n    // Getting accounts list\n    const accounts = await web3.eth.getAccounts();\n\n    // Getting a reference to a friendsProfile - NOTE: it will work only if the user provided us playerTwo's address\n    const friendsProfile = new web3.eth.Contract(\n      profileAbi,\n      this.state.playerTwo\n    );\n\n    makeBatchRequest([\n      // remove both of the exchanges in a batch request.\n      profile.methods.removeContracts().send,\n      friendsProfile.methods.removeContracts().send,\n    ]);\n    function makeBatchRequest(calls) {\n      let batch = new web3.BatchRequest();\n\n      calls.map((call) => {\n        return new Promise((res, rej) => {\n          let req = call.request(\n            { from: accounts[0], gas: \"2000000\" },\n            (err, data) => {\n              if (err) rej(err);\n              else res(data);\n            }\n          );\n          batch.add(req);\n        });\n      });\n      batch.execute();\n    }\n  };\n\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  // All the handlers:\n\n  handleChangeFriendAddress = (event) => {\n    event.preventDefault();\n    this.setState({ friendsAddress: event.target.value });\n  };\n\n  handleChangeFriendRequestIndex = (event) => {\n    event.preventDefault();\n    this.setState({ friendRequestIndex: event.target.value });\n  };\n\n  handleChangePlayerOne = (event) => {\n    event.preventDefault();\n    this.setState({ playerOne: event.target.value });\n  };\n\n  handleChangeProvidedAmount = (event) => {\n    event.preventDefault();\n    this.setState({ providedAmount: event.target.value });\n  };\n\n  handleChangePlayerTwo = (event) => {\n    event.preventDefault();\n    this.setState({ playerTwo: event.target.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <Dashboard />\n        <h2>Friends Part</h2>\n        <form onSubmit={this.onSubmitAddFriendRequest}>\n          <label>\n            Add a friend: insert here the friend's address\n            <input\n              type=\"text\"\n              value={this.state.friendsAddress}\n              onChange={this.handleChangeFriendAddress}\n              name=\"name\"\n            />\n          </label>\n          <input type=\"submit\" value=\"Send a friend Request!\" />\n        </form>\n\n        <form onSubmit={this.onSubmitConfirmFriendRequest}>\n          <label>\n            Confirm a friend request (insert friend's address)\n            <input\n              type=\"text\"\n              value={this.state.friendsAddress}\n              onChange={this.handleChangeFriendAddress}\n              name=\"name\"\n            />\n          </label>\n          <input type=\"submit\" value=\"Confirm a friend Request!\" />\n        </form>\n\n        <form onSubmit={this.onCheckMyFriends}>\n          <label>Click here to check your Friends!</label>\n          <input type=\"submit\" value=\"Check your Friends!\" />\n        </form>\n\n        <form onSubmit={this.onRemoveFriendsList}>\n          <label>Click here to remove your Friends!</label>\n          <input type=\"submit\" value=\"Remove your Friends!\" />\n        </form>\n        <hr />\n        {/* ****************************************************************** */}\n        <h2>BinaryContract Part</h2>\n\n        <form onSubmit={this.onSubmitAddDebtRequest}>\n          <label>\n            playerOne-amount-playerTwo\n            <input\n              type=\"text\"\n              value={this.state.playerOne}\n              onChange={this.handleChangePlayerOne}\n              name=\"name\"\n            />\n            <input\n              type=\"text\"\n              value={this.state.providedAmount}\n              onChange={this.handleChangeProvidedAmount}\n              name=\"name\"\n            />\n            <input\n              type=\"text\"\n              value={this.state.playerTwo}\n              onChange={this.handleChangePlayerTwo}\n              name=\"name\"\n            />\n          </label>\n          <input type=\"submit\" value=\"Send a Debt Request!\" />\n        </form>\n\n        <form onSubmit={this.onSubmitConfirmDebtRequest}>\n          <label>\n            playerOne-amount-playerTwo\n            <input\n              type=\"text\"\n              value={this.state.playerOne}\n              onChange={this.handleChangePlayerOne}\n              name=\"name\"\n            />\n            <input\n              type=\"text\"\n              value={this.state.providedAmount}\n              onChange={this.handleChangeProvidedAmount}\n              name=\"name\"\n            />\n            <input\n              type=\"text\"\n              value={this.state.playerTwo}\n              onChange={this.handleChangePlayerTwo}\n              name=\"name\"\n            />\n          </label>\n          <input type=\"submit\" value=\"Confirm a Debt Request!\" />\n        </form>\n\n        <form onSubmit={this.onCheckMyContracts}>\n          <label>Click here to check your contracts!</label>\n          <input type=\"submit\" value=\"Check your contracts!\" />\n        </form>\n\n        <form onSubmit={this.onCheckMyExchanges}>\n          <label>Click here to check your Exchanges!</label>\n          <input type=\"submit\" value=\"Check your Exchanges!\" />\n        </form>\n\n        <form onSubmit={this.onRemoveContractsList}>\n          <label>Click here to remove your Contracts!</label>\n          <input type=\"submit\" value=\"Remove your Contracts!\" />\n        </form>\n\n        <form onSubmit={this.onRemoveExchangesList}>\n          <label>Click here to remove your Exchanges!</label>\n          <input type=\"submit\" value=\"Remove your Exchanges!\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}